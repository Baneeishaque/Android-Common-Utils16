trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - 'renovate.json'
      - 'README.md'
      - 'jitpack.yml'
      - 'azure-pipelines-docker.yml'
      - '.whitesource'
      - '.travis.yml'
      - '.gitpod.*'
      - '.gitignore'
      - '.vscode/*'
      - '.run/*'
      - '.devcontainer/*'

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-latest'
      osFam: 'linux'
    mac:
      imageName: 'macos-latest'
      osFam: 'mac'
    windows:
      imageName: 'windows-latest'
      osFam: 'windows'

pool:
  vmImage: $(imageName)

steps:
  - checkout: self
    submodules: recursive

  - task: Cache@2
    displayName: Gradle User Home Cache
    inputs:
      key: 'gradleUserHome | "$(Agent.OS)"'
      restoreKeys: gradleUserHome
      path: $(Agent.HomeDirectory)/.gradle

  - task: PowerShell@2
    displayName: Setup runtimes via mise and verify
    inputs:
      filePath: $(Build.SourcesDirectory)/ci/setup-mise-java.ps1
      pwsh: true

  - task: Cache@2
    displayName: Cache mise data
    inputs:
      key: mise-data | $(Agent.OS) | $(Agent.OSArchitecture) | $(Build.SourcesDirectory)/mise.toml
      path: $(Agent.HomeDirectory)/.local/share/mise

  - task: Cache@2
    displayName: Cache mise cache
    inputs:
      key: mise-cache | $(Agent.OS) | $(Agent.OSArchitecture) | $(Build.SourcesDirectory)/mise.toml
      path: $(Agent.HomeDirectory)/.cache/mise

  - task: CmdLine@2
    displayName: "Guard: mise Java is active"
    inputs:
      script: |
        set -euo pipefail
        echo "Guard: verifying Java selectionâ€¦"
        ACTIVE_JAVA="$(command -v java || true)"
        MISE_JAVA="$(mise which java || true)"
        echo "command -v java => $ACTIVE_JAVA"
        echo "mise which java => $MISE_JAVA"
        if [ -z "$ACTIVE_JAVA" ] || [ -z "$MISE_JAVA" ] || [ "$ACTIVE_JAVA" != "$MISE_JAVA" ]; then
          echo "Mismatch: shell java doesn't match mise java" >&2
          echo "PATH: $PATH"
          type -a java || true
          exit 1
        fi

        # Double-check JVM reports the same home as JAVA_HOME
        JVM_HOME="$(
          java -XshowSettings:properties -version 2>&1 | awk -F'= ' '/^ *java\.home =/ {print $2; exit}'
        )"
        echo "java.home => $JVM_HOME"
        if [ -z "$JAVA_HOME" ] || [ -z "$JVM_HOME" ] || [ "$JVM_HOME" != "$JAVA_HOME" ]; then
          echo "Mismatch: JVM java.home doesn't equal JAVA_HOME" >&2
          exit 1
        fi
        echo "Guard passed."

  - task: CmdLine@2
    displayName: "Gradle build : Android Library"
    inputs:
      script: ./gradlew build
    env:
      JAVA_HOME: $(JAVA_HOME)

  - task: PowerShell@2
    displayName: Stop Gradle daemon
    inputs:
      filePath: $(Build.SourcesDirectory)/ci/gradle-stop.ps1
      pwsh: true
